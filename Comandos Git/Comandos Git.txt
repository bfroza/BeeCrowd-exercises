git branch 'teste' serve para criar um galho no repositório.

git branch --list mostra os galhos.

git checkout -b 'teste' cria uma branch e já entra nela.

git switch 'teste' entra na branch também.

git switch - sai da branch.

git switch -c cria uma branch.

git push -u origin 'teste' adiciona a branch ao servidor.

git branch -d 'teste' exclui a branch e seu histórico.

git merge 'teste' primeiramente vou para a branch que quero mesclar os arquivos (master), 
digito o comando com o nome da branch que quero mesclar, 
esse fará uma alteração na branch escolhida mudando apenas as alterações.

git branch --no-merged diz quais branches não foram mergeadas (mescladas). Padrão merge

git branch --merged consegue ver quais branches já foram mergeadas para a branch em que você está atualmente..

git tag teste cria a tag, mas você tem que estar na branch/commit escolhido.

git tag -a -m "Aprendendo a mesclar e comitar" teste cria uma tag com uma descrição. Mostra o criador e outras informações.

git tag mostra as tags do projeto.

git tag -n mostra a descrição.

git tag 'T1' 'c0360e6' usa o código do log para criar a tag.

git push origin 'T1' envia a tag para o repositório.

git push --tags envia todas as tags para o servidor, mas cuidado, mesmo que as tags locais já estejam excluídas no GitHub, ao utilizar esse comando, elas serão enviadas.

git tag -d 'T1' exclui a tag localmente.

git push --delete origin 'T1' envia uma mensagem para o servidor excluir a tag.

git stash salva as mudanças da branch no momento.

git stash list mostra onde ficou salva a mudança.

git stash apply desfaz o stash e a alteração volta a ser rastreada.

git revert 'T1' reverte o commit, criando um novo para substituí-lo, mas as alterações ficam salvas no histórico.

git reset --hard HEAD~1 exclui o commit do local e as alterações, mas ele pode ser acessado no repositório online.

git reset --mixed HEAD~1 exclui o commit do local, mas as alterações ficam "salvas".

git reset --soft HEAD~1 é usado para desfazer o último commit, mantendo as alterações do commit desfeito no seu diretório de trabalho e no índice de preparação (staging area).

git push --force força o repositório online a aceitar as mudanças. Faz uma sobreescrita do repositório online.

git push --force-with-lease fara o mesmo que  acima, mas somente se nenhuma alteração for perdida
